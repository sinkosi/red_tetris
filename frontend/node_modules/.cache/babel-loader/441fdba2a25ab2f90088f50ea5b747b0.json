{"ast":null,"code":"import { config } from \"./canvasConfig\";\nimport drawBlock from \"./drawBlock\";\n\nfunction CanvasGrid(context, colums = config.COLS, rows = config.ROWS, backgroundColour = config.EMPTY_BG) {\n  this.colums = colums;\n  this.rows = rows;\n  this.colour = backgroundColour;\n  this.coords = [];\n\n  this.init = () => {\n    for (let row = 0; row < this.rows; row++) {\n      this.coords[row] = [];\n\n      for (let col = 0; col < this.colums; col++) {\n        this.coords[row][col] = config.EMPTY_BG;\n      }\n    }\n\n    this.draw();\n  };\n\n  this.draw = () => {\n    let r = 0;\n    let c = 0;\n\n    while (this.coords[r]) {\n      c = 0;\n\n      while (this.coords[r][c]) {\n        drawBlock(context, c, r, this.coords[r][c]);\n        c++;\n      }\n\n      r++;\n    }\n  };\n\n  this.penalty = currentPiece => {\n    let y = 0;\n\n    while (this.coords[y + 1]) {\n      this.coords[y] = this.coords[y + 1];\n      y++;\n    }\n\n    this.coords[y] = [];\n\n    for (let c = 0; c < config.COLS; c++) {\n      this.coords[y][c] = config.PENALTY_BG;\n    }\n\n    this.draw();\n    if (currentPiece.y - 1 >= 0) currentPiece.y -= 1;\n    currentPiece.draw();\n  };\n\n  this.removeFilledLines = () => {\n    for (let y = this.coords.length - 1; y > 0; y--) {\n      let lineFull = true;\n\n      for (let x = 0; x < this.coords[y].length; x++) {\n        if (this.coords[y][x] === config.EMPTY_BG || this.coords[y][x] === config.PENALTY_BG) {\n          lineFull = false;\n          break;\n        }\n      }\n\n      if (lineFull) {\n        for (let z = y; z > 0; z--) {\n          this.coords[z] = this.coords[z - 1];\n        }\n\n        this.coords[0] = [];\n\n        for (let i = 0; i < this.colums; i++) {\n          this.coords[0][i] = config.EMPTY_BG;\n        }\n\n        y++;\n      }\n\n      lineFull = true;\n    }\n\n    this.draw();\n  };\n}\n\nexport default CanvasGrid;","map":{"version":3,"sources":["/home/mosima/Desktop/red_tetris/frontend/src/misc/canvasGrid.js"],"names":["config","drawBlock","CanvasGrid","context","colums","COLS","rows","ROWS","backgroundColour","EMPTY_BG","colour","coords","init","row","col","draw","r","c","penalty","currentPiece","y","PENALTY_BG","removeFilledLines","length","lineFull","x","z","i"],"mappings":"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","sourcesContent":["import { config } from \"./canvasConfig\"\nimport drawBlock from \"./drawBlock\"\n\nfunction CanvasGrid(context, colums = config.COLS, rows = config.ROWS, backgroundColour = config.EMPTY_BG) {\n\tthis.colums = colums\n\tthis.rows = rows\n\tthis.colour = backgroundColour\n\tthis.coords = []\n\n\tthis.init = () => {\n\t\tfor (let row = 0; row < this.rows; row++) {\n\t\t\tthis.coords[row] = []\n\t\t\tfor (let col = 0; col < this.colums; col++) {\n\t\t\t\tthis.coords[row][col] = config.EMPTY_BG\n\t\t\t}\n\t\t}\n\t\tthis.draw()\n\t}\n\n\tthis.draw = () => {\n\t\tlet r = 0\n\t\tlet c = 0\n\t\twhile (this.coords[r]) {\n\t\t\tc = 0\n\t\t\twhile (this.coords[r][c]) {\n\t\t\t\tdrawBlock(context, c, r, this.coords[r][c])\n\t\t\t\tc++\n\t\t\t}\n\t\t\tr++\n\t\t}\n\t}\n\n\tthis.penalty = (currentPiece) => {\n\t\tlet y = 0\n\t\twhile (this.coords[y + 1]) {\n\t\t\tthis.coords[y] = this.coords[y + 1]\n\t\t\ty++\n\t\t}\n\t\tthis.coords[y] = []\n\t\tfor (let c = 0; c < config.COLS; c++) {\n\t\t\tthis.coords[y][c] = config.PENALTY_BG\n\t\t}\n\t\tthis.draw()\n\n\t\tif (currentPiece.y - 1 >= 0) currentPiece.y -= 1\n\t\tcurrentPiece.draw()\n\t}\n\n\tthis.removeFilledLines = () => {\n\t\tfor (let y = this.coords.length - 1; y > 0; y--) {\n\t\t\tlet lineFull = true\n\t\t\tfor (let x = 0; x < this.coords[y].length; x++) {\n\t\t\t\tif (this.coords[y][x] === config.EMPTY_BG || this.coords[y][x] === config.PENALTY_BG) {\n\t\t\t\t\tlineFull = false\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lineFull) {\n\t\t\t\tfor (let z = y; z > 0; z--) {\n\t\t\t\t\tthis.coords[z] = this.coords[z - 1]\n\t\t\t\t}\n\t\t\t\tthis.coords[0] = []\n\t\t\t\tfor (let i = 0; i < this.colums; i++) {\n\t\t\t\t\tthis.coords[0][i] = config.EMPTY_BG\n\t\t\t\t}\n\t\t\t\ty++\n\t\t\t}\n\t\t\tlineFull = true\n\t\t}\n\t\tthis.draw()\n\t}\n}\n\nexport default CanvasGrid\n"]},"metadata":{},"sourceType":"module"}