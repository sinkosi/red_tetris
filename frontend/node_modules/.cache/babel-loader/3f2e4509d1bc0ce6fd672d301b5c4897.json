{"ast":null,"code":"var _jsxFileName = \"/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { config } from \"../misc/canvasConfig\";\nimport CanvasGrid from \"../misc/canvasGrid\";\nimport controls from \"../misc/controls\";\nimport { newPiece } from \"../misc/Piece\";\n\nconst GameCanvas = ({\n  grid,\n  currentPiece,\n  setCurrentPiece,\n  setGrid\n}) => {\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext(\"2d\");\n\n      if (renderCtx) {\n        setContext(renderCtx);\n      }\n    }\n  }, [context]);\n  useEffect(() => {\n    if (context) {\n      if (!grid) {\n        let gr = new CanvasGrid(context);\n        gr.init();\n        setGrid(gr);\n      } else {\n        console.log(\"grid already exist\");\n\n        if (!currentPiece) {\n          let piece = newPiece(context, grid);\n          piece.draw();\n          setCurrentPiece(piece);\n        } else {\n          console.log(\"current piece already set: \", currentPiece);\n        }\n      }\n    }\n\n    return () => {\n      console.log(\"this is where the cleanup stuff happens\");\n    };\n  }, [context, grid, currentPiece, setCurrentPiece, setGrid]);\n  useEffect(() => {\n    const handleKeyPress = ({\n      key\n    }) => controls(key, currentPiece, grid, context);\n\n    if (currentPiece) {\n      document.addEventListener(\"keydown\", handleKeyPress);\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [currentPiece, grid, context]);\n  const [seconds, setSeconds] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(seconds => seconds + 1);\n      if (currentPiece) if (!currentPiece.moveDown()) {\n        currentPiece.lock();\n        grid.removeFilledLines();\n        let np = newPiece(context, grid);\n        if (!np) props.setGameOver(true);\n        setCurrentPiece(np);\n        setSeconds(0);\n        console.log(\"lock current piece and request for the next piece\");\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [currentPiece, context, grid, props]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }\n  }, seconds, \" seconds since mount\"), /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"canvas\",\n    ref: canvasRef,\n    width: config.COLS * config.BLOCK,\n    height: config.ROWS * config.BLOCK,\n    style: {\n      border: \"2px solid #000\",\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default GameCanvas;","map":{"version":3,"sources":["/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx"],"names":["React","useEffect","useState","useRef","config","CanvasGrid","controls","newPiece","GameCanvas","grid","currentPiece","setCurrentPiece","setGrid","canvasRef","context","setContext","current","renderCtx","getContext","gr","init","console","log","piece","draw","handleKeyPress","key","document","addEventListener","removeEventListener","seconds","setSeconds","interval","setInterval","moveDown","lock","removeFilledLines","np","props","setGameOver","clearInterval","textAlign","COLS","BLOCK","ROWS","border","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"\nimport { config } from \"../misc/canvasConfig\"\nimport CanvasGrid from \"../misc/canvasGrid\"\nimport controls from \"../misc/controls\"\nimport { newPiece } from \"../misc/Piece\"\n\nconst GameCanvas = ({ grid, currentPiece, setCurrentPiece, setGrid }) => {\n\tconst canvasRef = useRef(null)\n\tconst [context, setContext] = useState(null)\n\n\tuseEffect(() => {\n\t\tif (canvasRef.current) {\n\t\t\tconst renderCtx = canvasRef.current.getContext(\"2d\")\n\n\t\t\tif (renderCtx) {\n\t\t\t\tsetContext(renderCtx)\n\t\t\t}\n\t\t}\n\t}, [context])\n\n\tuseEffect(() => {\n\t\tif (context) {\n\t\t\tif (!grid) {\n\t\t\t\tlet gr = new CanvasGrid(context)\n\t\t\t\tgr.init()\n\t\t\t\tsetGrid(gr)\n\t\t\t} else {\n\t\t\t\tconsole.log(\"grid already exist\")\n\n\t\t\t\tif (!currentPiece) {\n\t\t\t\t\tlet piece = newPiece(context, grid)\n\t\t\t\t\tpiece.draw()\n\t\t\t\t\tsetCurrentPiece(piece)\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"current piece already set: \", currentPiece)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn () => {\n\t\t\tconsole.log(\"this is where the cleanup stuff happens\")\n\t\t}\n\t}, [context, grid, currentPiece, setCurrentPiece, setGrid])\n\n\tuseEffect(() => {\n\t\tconst handleKeyPress = ({ key }) => controls(key, currentPiece, grid, context)\n\t\tif (currentPiece) {\n\t\t\tdocument.addEventListener(\"keydown\", handleKeyPress)\n\t\t}\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"keydown\", handleKeyPress)\n\t\t}\n\t}, [currentPiece, grid, context])\n\n\tconst [seconds, setSeconds] = useState(0)\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tsetSeconds((seconds) => seconds + 1)\n\t\t\tif (currentPiece)\n\t\t\t\tif (!currentPiece.moveDown()) {\n\t\t\t\t\tcurrentPiece.lock()\n\t\t\t\t\tgrid.removeFilledLines()\n\t\t\t\t\tlet np = newPiece(context, grid)\n\t\t\t\t\tif (!np) props.setGameOver(true)\n\t\t\t\t\tsetCurrentPiece(np)\n\t\t\t\t\tsetSeconds(0)\n\t\t\t\t\tconsole.log(\"lock current piece and request for the next piece\")\n\t\t\t\t}\n\t\t}, 1000)\n\t\treturn () => clearInterval(interval)\n\t}, [currentPiece, context, grid, props])\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\ttextAlign: \"center\",\n\t\t\t}}>\n\t\t\t<h3>{seconds} seconds since mount</h3>\n\t\t\t<canvas\n\t\t\t\tid=\"canvas\"\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={config.COLS * config.BLOCK}\n\t\t\t\theight={config.ROWS * config.BLOCK}\n\t\t\t\tstyle={{\n\t\t\t\t\tborder: \"2px solid #000\",\n\t\t\t\t\tmarginTop: 10,\n\t\t\t\t}}></canvas>\n\t\t</div>\n\t)\n}\n\nexport default GameCanvas\n"]},"metadata":{},"sourceType":"module"}