{"ast":null,"code":"var _jsxFileName = \"/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx\";\nimport React, { useEffect, useRef } from \"react\";\nimport { config } from \"../misc/canvasConfig\";\nimport CanvasGrid from \"../misc/canvasGrid\";\nimport Piece from \"../misc/Piece\"; //import Swipeable from 'react-swipeable'\n\nfunction controls(key, piece, grid, context) {\n  if (key === \"ArrowUp\") piece.rotate();\n  if (key === \"ArrowLeft\") piece.moveLeft();\n  if (key === \"ArrowRight\") piece.moveRight();\n  if (key === \"ArrowDown\") piece.moveDown();\n  if (key === \"l\") piece.lock();\n  if (key === \"p\") grid.penalty(piece);\n  if (key === \"n\") newPiece(context, grid);\n  /*if (key === onSwipedUp) piece.rotate()\n  if (key === onSwipedLeft) piece.moveLeft()\n  PropTypes.func,\n  \tonSwipedRight: PropTypes.func,\n  \tonSwipedDown: PropTypes.func,\n  \tonSwipedLeft: PropTypes.func,onSwip)*/\n} //function mobile_controls(onSwiped, piec)\n\n\nfunction newPiece(context, grid) {\n  if (!context || !grid) return null;\n  let pieceNum = Math.floor(Math.random() * pieces.length);\n  let pieceVariant = Math.floor(Math.random() * pieces[pieceNum][0].length);\n  console.log(pieceNum, pieceVariant);\n  let newPiece = new Piece(context, grid, pieces[pieceNum][0], pieces[pieceNum][1]);\n  newPiece.active = pieceVariant;\n  let [y, x] = pieceStartPosition(pieceNum, pieceVariant);\n  newPiece.x = x;\n  newPiece.y = y;\n  newPiece.draw();\n  if (newPiece.isCollition(x, y, pieceVariant)) return null;\n  return newPiece;\n} // const GameCanvas = (props) => {\n\n\nconst GameCanvas = ({\n  grid,\n  currentPiece,\n  setCurrentPiece,\n  setGrid,\n  setGameOver,\n  context,\n  setContext,\n  getNextPiece\n}) => {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext(\"2d\");\n\n      if (renderCtx) {\n        setContext(renderCtx);\n      }\n    }\n  }, [context, setContext]);\n  useEffect(() => {\n    if (context) {\n      if (!grid) {\n        let gr = new CanvasGrid(context);\n        gr.init();\n        setGrid(gr);\n      } else {\n        // console.log(\"grid already exist\")\n        // grid.draw()\n        if (!currentPiece) {\n          console.log(\"request for a new piece\");\n          getNextPiece();\n        }\n      }\n    }\n\n    return () => {};\n  }, [context, grid, currentPiece, setCurrentPiece, setGrid, getNextPiece]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (currentPiece) if (!currentPiece.moveDown()) {\n        currentPiece.lock();\n        grid.removeFilledLines();\n        grid.draw();\n        getNextPiece();\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [currentPiece, context, grid, setGameOver, setCurrentPiece, setContext, getNextPiece]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"canvas\",\n    ref: canvasRef,\n    width: config.COLS * config.BLOCK,\n    height: config.ROWS * config.BLOCK,\n    style: {\n      border: \"2px solid #000\",\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default GameCanvas;","map":{"version":3,"sources":["/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx"],"names":["React","useEffect","useRef","config","CanvasGrid","Piece","controls","key","piece","grid","context","rotate","moveLeft","moveRight","moveDown","lock","penalty","newPiece","pieceNum","Math","floor","random","pieces","length","pieceVariant","console","log","active","y","x","pieceStartPosition","draw","isCollition","GameCanvas","currentPiece","setCurrentPiece","setGrid","setGameOver","setContext","getNextPiece","canvasRef","current","renderCtx","getContext","gr","init","interval","setInterval","removeFilledLines","clearInterval","textAlign","COLS","BLOCK","ROWS","border","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\"\nimport { config } from \"../misc/canvasConfig\"\nimport CanvasGrid from \"../misc/canvasGrid\"\nimport Piece from \"../misc/Piece\"\n//import Swipeable from 'react-swipeable'\n\nfunction controls(key, piece, grid, context) {\n\tif (key === \"ArrowUp\") piece.rotate()\n\tif (key === \"ArrowLeft\") piece.moveLeft()\n\tif (key === \"ArrowRight\") piece.moveRight()\n\tif (key === \"ArrowDown\") piece.moveDown()\n\tif (key === \"l\") piece.lock()\n\tif (key === \"p\") grid.penalty(piece)\n\tif (key === \"n\") newPiece(context, grid)\n\t/*if (key === onSwipedUp) piece.rotate()\n\tif (key === onSwipedLeft) piece.moveLeft()\n\tPropTypes.func,\n\t\tonSwipedRight: PropTypes.func,\n\t\tonSwipedDown: PropTypes.func,\n\t\tonSwipedLeft: PropTypes.func,onSwip)*/\n}\n\n//function mobile_controls(onSwiped, piec)\n\nfunction newPiece(context, grid) {\n\tif (!context || !grid) return null\n\n\tlet pieceNum = Math.floor(Math.random() * pieces.length)\n\tlet pieceVariant = Math.floor(Math.random() * pieces[pieceNum][0].length)\n\tconsole.log(pieceNum, pieceVariant)\n\tlet newPiece = new Piece(context, grid, pieces[pieceNum][0], pieces[pieceNum][1])\n\n\tnewPiece.active = pieceVariant\n\tlet [y, x] = pieceStartPosition(pieceNum, pieceVariant)\n\tnewPiece.x = x\n\tnewPiece.y = y\n\tnewPiece.draw()\n\tif (newPiece.isCollition(x, y, pieceVariant)) return null\n\treturn newPiece\n}\n\n// const GameCanvas = (props) => {\n\nconst GameCanvas = ({\n\tgrid,\n\tcurrentPiece,\n\tsetCurrentPiece,\n\tsetGrid,\n\tsetGameOver,\n\tcontext,\n\tsetContext,\n\tgetNextPiece,\n}) => {\n\tconst canvasRef = useRef(null)\n\n\tuseEffect(() => {\n\t\tif (canvasRef.current) {\n\t\t\tconst renderCtx = canvasRef.current.getContext(\"2d\")\n\n\t\t\tif (renderCtx) {\n\t\t\t\tsetContext(renderCtx)\n\t\t\t}\n\t\t}\n\t}, [context, setContext])\n\n\tuseEffect(() => {\n\t\tif (context) {\n\t\t\tif (!grid) {\n\t\t\t\tlet gr = new CanvasGrid(context)\n\t\t\t\tgr.init()\n\t\t\t\tsetGrid(gr)\n\t\t\t} else {\n\t\t\t\t// console.log(\"grid already exist\")\n\t\t\t\t// grid.draw()\n\t\t\t\tif (!currentPiece) {\n\t\t\t\t\tconsole.log(\"request for a new piece\")\n\t\t\t\t\tgetNextPiece()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn () => {}\n\t}, [context, grid, currentPiece, setCurrentPiece, setGrid, getNextPiece])\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tif (currentPiece)\n\t\t\t\tif (!currentPiece.moveDown()) {\n\t\t\t\t\tcurrentPiece.lock()\n\t\t\t\t\tgrid.removeFilledLines()\n\t\t\t\t\tgrid.draw()\n\t\t\t\t\tgetNextPiece()\n\t\t\t\t}\n\t\t}, 1000)\n\t\treturn () => clearInterval(interval)\n\t}, [currentPiece, context, grid, setGameOver, setCurrentPiece, setContext, getNextPiece])\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\ttextAlign: \"center\",\n\t\t\t}}>\n\t\t\t<canvas\n\t\t\t\tid=\"canvas\"\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={config.COLS * config.BLOCK}\n\t\t\t\theight={config.ROWS * config.BLOCK}\n\t\t\t\tstyle={{\n\t\t\t\t\tborder: \"2px solid #000\",\n\t\t\t\t\tmarginTop: 10,\n\t\t\t\t}}></canvas>\n\t\t</div>\n\t)\n}\n\nexport default GameCanvas\n"]},"metadata":{},"sourceType":"module"}