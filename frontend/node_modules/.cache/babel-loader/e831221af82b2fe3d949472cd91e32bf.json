{"ast":null,"code":"var _jsxFileName = \"/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx\";\nimport React, { useEffect, useRef } from \"react\";\nimport { config } from \"../misc/canvasConfig\";\nimport CanvasGrid from \"../misc/canvasGrid\";\n\nconst GameCanvas = ({\n  grid,\n  currentPiece,\n  setCurrentPiece,\n  setGrid,\n  setGameOver,\n  context,\n  setContext,\n  getNextPiece\n}) => {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext(\"2d\");\n\n      if (renderCtx) {\n        setContext(renderCtx);\n      }\n    }\n  }, [context, setContext]);\n  useEffect(() => {\n    if (context) {\n      if (!grid) {\n        let gr = new CanvasGrid(context);\n        gr.init();\n        setGrid(gr);\n      } else {\n        // console.log(\"grid already exist\")\n        // grid.draw()\n        if (!currentPiece) {\n          console.log(\"request for a new piece\");\n          getNextPiece();\n        }\n      }\n    }\n\n    return () => {};\n  }, [context, grid, currentPiece, setCurrentPiece, setGrid, getNextPiece]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (currentPiece) if (!currentPiece.moveDown()) {\n        currentPiece.lock();\n        grid.removeFilledLines();\n        grid.draw();\n        getNextPiece();\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [currentPiece, context, grid, setGameOver, setCurrentPiece, setContext, getNextPiece]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"canvas\",\n    ref: canvasRef,\n    width: config.COLS * config.BLOCK,\n    height: config.ROWS * config.BLOCK,\n    style: {\n      border: \"2px solid #000\",\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default GameCanvas;","map":{"version":3,"sources":["/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx"],"names":["React","useEffect","useRef","config","CanvasGrid","GameCanvas","grid","currentPiece","setCurrentPiece","setGrid","setGameOver","context","setContext","getNextPiece","canvasRef","current","renderCtx","getContext","gr","init","console","log","interval","setInterval","moveDown","lock","removeFilledLines","draw","clearInterval","textAlign","COLS","BLOCK","ROWS","border","marginTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AACnBC,EAAAA,IADmB;AAEnBC,EAAAA,YAFmB;AAGnBC,EAAAA,eAHmB;AAInBC,EAAAA,OAJmB;AAKnBC,EAAAA,WALmB;AAMnBC,EAAAA,OANmB;AAOnBC,EAAAA,UAPmB;AAQnBC,EAAAA;AARmB,CAAD,KASb;AACL,QAAMC,SAAS,GAAGZ,MAAM,CAAC,IAAD,CAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIa,SAAS,CAACC,OAAd,EAAuB;AACtB,YAAMC,SAAS,GAAGF,SAAS,CAACC,OAAV,CAAkBE,UAAlB,CAA6B,IAA7B,CAAlB;;AAEA,UAAID,SAAJ,EAAe;AACdJ,QAAAA,UAAU,CAACI,SAAD,CAAV;AACA;AACD;AACD,GARQ,EAQN,CAACL,OAAD,EAAUC,UAAV,CARM,CAAT;AAUAX,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIU,OAAJ,EAAa;AACZ,UAAI,CAACL,IAAL,EAAW;AACV,YAAIY,EAAE,GAAG,IAAId,UAAJ,CAAeO,OAAf,CAAT;AACAO,QAAAA,EAAE,CAACC,IAAH;AACAV,QAAAA,OAAO,CAACS,EAAD,CAAP;AACA,OAJD,MAIO;AACN;AACA;AACA,YAAI,CAACX,YAAL,EAAmB;AAClBa,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAR,UAAAA,YAAY;AACZ;AACD;AACD;;AACD,WAAO,MAAM,CAAE,CAAf;AACA,GAhBQ,EAgBN,CAACF,OAAD,EAAUL,IAAV,EAAgBC,YAAhB,EAA8BC,eAA9B,EAA+CC,OAA/C,EAAwDI,YAAxD,CAhBM,CAAT;AAkBAZ,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMqB,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAClC,UAAIhB,YAAJ,EACC,IAAI,CAACA,YAAY,CAACiB,QAAb,EAAL,EAA8B;AAC7BjB,QAAAA,YAAY,CAACkB,IAAb;AACAnB,QAAAA,IAAI,CAACoB,iBAAL;AACApB,QAAAA,IAAI,CAACqB,IAAL;AACAd,QAAAA,YAAY;AACZ;AACF,KAR2B,EAQzB,IARyB,CAA5B;AASA,WAAO,MAAMe,aAAa,CAACN,QAAD,CAA1B;AACA,GAXQ,EAWN,CAACf,YAAD,EAAeI,OAAf,EAAwBL,IAAxB,EAA8BI,WAA9B,EAA2CF,eAA3C,EAA4DI,UAA5D,EAAwEC,YAAxE,CAXM,CAAT;AAaA,sBACC;AACC,IAAA,KAAK,EAAE;AACNgB,MAAAA,SAAS,EAAE;AADL,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIC;AACC,IAAA,EAAE,EAAC,QADJ;AAEC,IAAA,GAAG,EAAEf,SAFN;AAGC,IAAA,KAAK,EAAEX,MAAM,CAAC2B,IAAP,GAAc3B,MAAM,CAAC4B,KAH7B;AAIC,IAAA,MAAM,EAAE5B,MAAM,CAAC6B,IAAP,GAAc7B,MAAM,CAAC4B,KAJ9B;AAKC,IAAA,KAAK,EAAE;AACNE,MAAAA,MAAM,EAAE,gBADF;AAENC,MAAAA,SAAS,EAAE;AAFL,KALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJD,CADD;AAgBA,CArED;;AAuEA,eAAe7B,UAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\"\nimport { config } from \"../misc/canvasConfig\"\nimport CanvasGrid from \"../misc/canvasGrid\"\n\nconst GameCanvas = ({\n\tgrid,\n\tcurrentPiece,\n\tsetCurrentPiece,\n\tsetGrid,\n\tsetGameOver,\n\tcontext,\n\tsetContext,\n\tgetNextPiece,\n}) => {\n\tconst canvasRef = useRef(null)\n\n\tuseEffect(() => {\n\t\tif (canvasRef.current) {\n\t\t\tconst renderCtx = canvasRef.current.getContext(\"2d\")\n\n\t\t\tif (renderCtx) {\n\t\t\t\tsetContext(renderCtx)\n\t\t\t}\n\t\t}\n\t}, [context, setContext])\n\n\tuseEffect(() => {\n\t\tif (context) {\n\t\t\tif (!grid) {\n\t\t\t\tlet gr = new CanvasGrid(context)\n\t\t\t\tgr.init()\n\t\t\t\tsetGrid(gr)\n\t\t\t} else {\n\t\t\t\t// console.log(\"grid already exist\")\n\t\t\t\t// grid.draw()\n\t\t\t\tif (!currentPiece) {\n\t\t\t\t\tconsole.log(\"request for a new piece\")\n\t\t\t\t\tgetNextPiece()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn () => {}\n\t}, [context, grid, currentPiece, setCurrentPiece, setGrid, getNextPiece])\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tif (currentPiece)\n\t\t\t\tif (!currentPiece.moveDown()) {\n\t\t\t\t\tcurrentPiece.lock()\n\t\t\t\t\tgrid.removeFilledLines()\n\t\t\t\t\tgrid.draw()\n\t\t\t\t\tgetNextPiece()\n\t\t\t\t}\n\t\t}, 1000)\n\t\treturn () => clearInterval(interval)\n\t}, [currentPiece, context, grid, setGameOver, setCurrentPiece, setContext, getNextPiece])\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\ttextAlign: \"center\",\n\t\t\t}}>\n\t\t\t<canvas\n\t\t\t\tid=\"canvas\"\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={config.COLS * config.BLOCK}\n\t\t\t\theight={config.ROWS * config.BLOCK}\n\t\t\t\tstyle={{\n\t\t\t\t\tborder: \"2px solid #000\",\n\t\t\t\t\tmarginTop: 10,\n\t\t\t\t}}></canvas>\n\t\t</div>\n\t)\n}\n\nexport default GameCanvas\n"]},"metadata":{},"sourceType":"module"}