{"ast":null,"code":"var _jsxFileName = \"/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx\";\nimport React, { useEffect, useState, useRef } from \"react\";\n/**********************************\\\n * canvas config data\n\\**********************************/\n\nconst ROWS = 20;\nconst COLS = 10;\nconst EMPTY_BG = \"#765\";\nconst BORDER = \"adf\";\nconst BLOCK = 30;\n/****\n * Canvas drawing functions\n */\n\nconst drawBlock = (context, x, y, colour = EMPTY_BG, strokeColour = BORDER) => {\n  context.fillStyle = colour;\n  context.fillRect(x * BLOCK, y * BLOCK, BLOCK, BLOCK);\n  context.strokeStyle = strokeColour;\n  context.strokeRect(x * BLOCK, y * BLOCK, BLOCK, BLOCK);\n};\n/***\n * Tetramino Class\n */\n\n\nfunction Piece(context, grid, piece, colour) {\n  this.piece = piece;\n  this.colour = colour;\n  this.active = 0;\n  this.x = 0;\n  this.y = 0;\n  this.context = context;\n\n  this.draw = (active = this.active) => {\n    this.active = active;\n\n    for (let row = 0; row < this.piece[this.active].length; row++) {\n      for (let col = 0; col < this.piece[this.active][row].length; col++) {\n        if (this.piece[this.active][row][col]) drawBlock(this.context, this.x + col, this.y + row, this.colour);\n      }\n    }\n  };\n\n  this.clear = (active = this.active) => {\n    this.active = active;\n\n    for (let row = 0; row < this.piece[this.active].length; row++) {\n      for (let col = 0; col < this.piece[this.active][row].length; col++) {\n        if (this.piece[this.active][row][col]) drawBlock(this.context, this.x + col, this.y + row, EMPTY_BG);\n      }\n    }\n  };\n\n  this.lock = () => {\n    for (let row = 0; row < this.piece[this.active].length; row++) {\n      for (let col = 0; col < this.piece[this.active][row].length; col++) {\n        if (this.piece[this.active][row][col]) grid.coords[this.y + row][this.x + col] = this.colour;\n      }\n    }\n  };\n\n  this.rotate = () => {\n    if (!this.isCollition(this.x, this.y, (this.active + 1) % 4)) {\n      this.clear();\n      this.active = (1 + this.active) % this.piece.length;\n      this.draw();\n    } else if (!this.isCollition(this.x + 1, this.y, (this.active + 1) % 4)) {\n      this.clear();\n      this.x = this.x + 1;\n      this.active = (1 + this.active) % this.piece.length;\n      this.draw();\n    } else if (!this.isCollition(this.x - 1, this.y, (this.active + 1) % 4)) {\n      this.clear();\n      this.x = this.x - 1;\n      this.active = (1 + this.active) % this.piece.length;\n      this.draw();\n    } else if (!this.isCollition(this.x - 2, this.y, (this.active + 1) % 4)) {\n      this.clear();\n      this.x = this.x - 2;\n      this.active = (1 + this.active) % this.piece.length;\n      this.draw();\n    }\n  };\n\n  this.moveLeft = () => {\n    if (!this.isCollition(this.x - 1)) {\n      this.clear();\n      this.x = this.x - 1;\n      this.draw();\n    }\n  };\n\n  this.moveRight = () => {\n    if (!this.isCollition(this.x + 1)) {\n      this.clear();\n      this.x = this.x + 1;\n      this.draw();\n    }\n  };\n\n  this.moveDown = () => {\n    if (!this.isCollition(this.x, this.y + 1)) {\n      this.clear();\n      this.y = this.y + 1;\n      this.draw();\n    }\n  };\n}\n/**\n * Grid class\n */\n\n\nfunction Grid(context, colums = COLS, rows = ROWS, backgroundColour = EMPTY_BG) {\n  this.colums = colums;\n  this.rows = rows;\n  this.colour = backgroundColour;\n  this.coords = [];\n\n  this.init = () => {\n    for (let row = 0; row < this.rows; row++) {\n      this.coords[row] = [];\n\n      for (let col = 0; col < this.colums; col++) {\n        this.coords[row][col] = EMPTY_BG;\n      }\n    }\n\n    this.draw();\n  };\n\n  this.draw = () => {\n    let r = 0;\n    let c = 0;\n\n    while (this.coords[r]) {\n      console.log(\"row number \", r, \"coord :\", {\n        coords: this.coords[r]\n      });\n      c = 0;\n\n      while (this.coords[r][c]) {\n        console.log(\"col number \", c, \"coord :\", {\n          coords: this.coords[r][c]\n        });\n        drawBlock(context, c, r, this.coords[r][c]);\n        c++;\n      }\n\n      r++;\n    }\n  };\n}\n\nconst GameCanvas = () => {\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  const [grid, setGrid] = useState(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext(\"2d\");\n\n      if (renderCtx) {\n        setContext(renderCtx);\n      }\n    }\n  }, [context]);\n  useEffect(() => {\n    if (context) {\n      if (!grid) {\n        let gr = new Grid(context);\n        gr.init();\n        setGrid(gr);\n        console.log(gr);\n      } else {\n        console.log(\"grid already exist\");\n      }\n      /**\n       * this should be where the drawing magic happens\n       */\n\n    }\n\n    return () => {\n      console.log(\"this is where the cleanup stuff happens\");\n    };\n  }, [context, grid]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"canvas\",\n    ref: canvasRef,\n    width: COLS * BLOCK,\n    height: ROWS * BLOCK,\n    style: {\n      border: \"2px solid #000\",\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default GameCanvas;","map":{"version":3,"sources":["/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx"],"names":["React","useEffect","useState","useRef","ROWS","COLS","EMPTY_BG","BORDER","BLOCK","drawBlock","context","x","y","colour","strokeColour","fillStyle","fillRect","strokeStyle","strokeRect","Piece","grid","piece","active","draw","row","length","col","clear","lock","coords","rotate","isCollition","moveLeft","moveRight","moveDown","Grid","colums","rows","backgroundColour","init","r","c","console","log","GameCanvas","canvasRef","setContext","setGrid","current","renderCtx","getContext","gr","textAlign","border","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\n/**********************************\\\n * canvas config data\n\\**********************************/\nconst ROWS = 20;\nconst COLS = 10;\nconst EMPTY_BG = \"#765\";\nconst BORDER = \"adf\";\nconst BLOCK = 30;\n\n/****\n * Canvas drawing functions\n */\nconst drawBlock = (context, x, y, colour = EMPTY_BG, strokeColour = BORDER) => {\n\tcontext.fillStyle = colour;\n\tcontext.fillRect(x * BLOCK, y * BLOCK, BLOCK, BLOCK);\n\tcontext.strokeStyle = strokeColour;\n\tcontext.strokeRect(x * BLOCK, y * BLOCK, BLOCK, BLOCK);\n};\n\n/***\n * Tetramino Class\n */\n\nfunction Piece(context, grid, piece, colour) {\n\tthis.piece = piece;\n\tthis.colour = colour;\n\tthis.active = 0;\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.context = context;\n\n\tthis.draw = (active = this.active) => {\n\t\tthis.active = active;\n\n\t\tfor (let row = 0; row < this.piece[this.active].length; row++) {\n\t\t\tfor (\n\t\t\t\tlet col = 0;\n\t\t\t\tcol < this.piece[this.active][row].length;\n\t\t\t\tcol++\n\t\t\t) {\n\t\t\t\tif (this.piece[this.active][row][col])\n\t\t\t\t\tdrawBlock(\n\t\t\t\t\t\tthis.context,\n\t\t\t\t\t\tthis.x + col,\n\t\t\t\t\t\tthis.y + row,\n\t\t\t\t\t\tthis.colour\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\tthis.clear = (active = this.active) => {\n\t\tthis.active = active;\n\n\t\tfor (let row = 0; row < this.piece[this.active].length; row++) {\n\t\t\tfor (\n\t\t\t\tlet col = 0;\n\t\t\t\tcol < this.piece[this.active][row].length;\n\t\t\t\tcol++\n\t\t\t) {\n\t\t\t\tif (this.piece[this.active][row][col])\n\t\t\t\t\tdrawBlock(\n\t\t\t\t\t\tthis.context,\n\t\t\t\t\t\tthis.x + col,\n\t\t\t\t\t\tthis.y + row,\n\t\t\t\t\t\tEMPTY_BG\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\tthis.lock = () => {\n\t\tfor (let row = 0; row < this.piece[this.active].length; row++) {\n\t\t\tfor (\n\t\t\t\tlet col = 0;\n\t\t\t\tcol < this.piece[this.active][row].length;\n\t\t\t\tcol++\n\t\t\t) {\n\t\t\t\tif (this.piece[this.active][row][col])\n\t\t\t\t\tgrid.coords[this.y + row][this.x + col] = this.colour;\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.rotate = () => {\n\t\tif (!this.isCollition(this.x, this.y, (this.active + 1) % 4)) {\n\t\t\tthis.clear();\n\t\t\tthis.active = (1 + this.active) % this.piece.length;\n\t\t\tthis.draw();\n\t\t} else if (\n\t\t\t!this.isCollition(this.x + 1, this.y, (this.active + 1) % 4)\n\t\t) {\n\t\t\tthis.clear();\n\t\t\tthis.x = this.x + 1;\n\t\t\tthis.active = (1 + this.active) % this.piece.length;\n\t\t\tthis.draw();\n\t\t} else if (\n\t\t\t!this.isCollition(this.x - 1, this.y, (this.active + 1) % 4)\n\t\t) {\n\t\t\tthis.clear();\n\t\t\tthis.x = this.x - 1;\n\n\t\t\tthis.active = (1 + this.active) % this.piece.length;\n\t\t\tthis.draw();\n\t\t} else if (\n\t\t\t!this.isCollition(this.x - 2, this.y, (this.active + 1) % 4)\n\t\t) {\n\t\t\tthis.clear();\n\t\t\tthis.x = this.x - 2;\n\n\t\t\tthis.active = (1 + this.active) % this.piece.length;\n\t\t\tthis.draw();\n\t\t}\n\t};\n\n\tthis.moveLeft = () => {\n\t\tif (!this.isCollition(this.x - 1)) {\n\t\t\tthis.clear();\n\t\t\tthis.x = this.x - 1;\n\t\t\tthis.draw();\n\t\t}\n\t};\n\n\tthis.moveRight = () => {\n\t\tif (!this.isCollition(this.x + 1)) {\n\t\t\tthis.clear();\n\t\t\tthis.x = this.x + 1;\n\t\t\tthis.draw();\n\t\t}\n\t};\n\n\tthis.moveDown = () => {\n\t\tif (!this.isCollition(this.x, this.y + 1)) {\n\t\t\tthis.clear();\n\t\t\tthis.y = this.y + 1;\n\t\t\tthis.draw();\n\t\t}\n\t};\n}\n\n/**\n * Grid class\n */\n\nfunction Grid(\n\tcontext,\n\tcolums = COLS,\n\trows = ROWS,\n\tbackgroundColour = EMPTY_BG\n) {\n\tthis.colums = colums;\n\tthis.rows = rows;\n\tthis.colour = backgroundColour;\n\tthis.coords = [];\n\n\tthis.init = () => {\n\t\tfor (let row = 0; row < this.rows; row++) {\n\t\t\tthis.coords[row] = [];\n\t\t\tfor (let col = 0; col < this.colums; col++) {\n\t\t\t\tthis.coords[row][col] = EMPTY_BG;\n\t\t\t}\n\t\t}\n\t\tthis.draw();\n\t};\n\tthis.draw = () => {\n\t\tlet r = 0;\n\t\tlet c = 0;\n\t\twhile (this.coords[r]) {\n\t\t\tconsole.log(\"row number \", r, \"coord :\", {\n\t\t\t\tcoords: this.coords[r],\n\t\t\t});\n\t\t\tc = 0;\n\t\t\twhile (this.coords[r][c]) {\n\t\t\t\tconsole.log(\"col number \", c, \"coord :\", {\n\t\t\t\t\tcoords: this.coords[r][c],\n\t\t\t\t});\n\n\t\t\t\tdrawBlock(context, c, r, this.coords[r][c]);\n\t\t\t\tc++;\n\t\t\t}\n\t\t\tr++;\n\t\t}\n\t};\n}\n\nconst GameCanvas = () => {\n\tconst canvasRef = useRef(null);\n\tconst [context, setContext] = useState(null);\n\tconst [grid, setGrid] = useState(null);\n\n\tuseEffect(() => {\n\t\tif (canvasRef.current) {\n\t\t\tconst renderCtx = canvasRef.current.getContext(\"2d\");\n\n\t\t\tif (renderCtx) {\n\t\t\t\tsetContext(renderCtx);\n\t\t\t}\n\t\t}\n\t}, [context]);\n\n\tuseEffect(() => {\n\t\tif (context) {\n\t\t\tif (!grid) {\n\t\t\t\tlet gr = new Grid(context);\n\t\t\t\tgr.init();\n\t\t\t\tsetGrid(gr);\n\t\t\t\tconsole.log(gr);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"grid already exist\");\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * this should be where the drawing magic happens\n\t\t\t */\n\t\t}\n\t\treturn () => {\n\t\t\tconsole.log(\"this is where the cleanup stuff happens\");\n\t\t};\n\t}, [context, grid]);\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\ttextAlign: \"center\",\n\t\t\t}}\n\t\t>\n\t\t\t<canvas\n\t\t\t\tid=\"canvas\"\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={COLS * BLOCK}\n\t\t\t\theight={ROWS * BLOCK}\n\t\t\t\tstyle={{\n\t\t\t\t\tborder: \"2px solid #000\",\n\t\t\t\t\tmarginTop: 10,\n\t\t\t\t}}\n\t\t\t></canvas>\n\t\t</div>\n\t);\n};\n\nexport default GameCanvas;\n"]},"metadata":{},"sourceType":"module"}