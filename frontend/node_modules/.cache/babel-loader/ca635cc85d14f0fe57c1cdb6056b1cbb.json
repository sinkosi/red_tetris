{"ast":null,"code":"var _jsxFileName = \"/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { config } from \"../misc/canvasConfig\";\nimport CanvasGrid from \"../misc/canvasGrid\";\nimport Piece, { newPiece } from \"../misc/Piece\";\n\nfunction controls(key, piece, grid, context) {\n  if (key === \"ArrowUp\") piece.rotate();\n  if (key === \"ArrowLeft\") piece.moveLeft();\n  if (key === \"ArrowRight\") piece.moveRight();\n  if (key === \"ArrowDown\") piece.moveDown();\n  if (key === \"l\") piece.lock();\n  if (key === \"p\") grid.penalty(piece);\n  if (key === \"n\") newPiece(context, grid);\n}\n\nconst GameCanvas = props => {\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  const [grid, setGrid] = useState(null);\n  const [currentPiece, setCurrentPiece] = useState(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext(\"2d\");\n\n      if (renderCtx) {\n        setContext(renderCtx);\n      }\n    }\n  }, [context]);\n  useEffect(() => {\n    if (context) {\n      if (!grid) {\n        let gr = new CanvasGrid(context);\n        gr.init();\n        setGrid(gr);\n      } else {\n        console.log(\"grid already exist\");\n\n        if (!currentPiece) {\n          let piece = newPiece(context, grid);\n          piece.draw();\n          setCurrentPiece(piece);\n        } else {\n          console.log(\"current piece already set: \", currentPiece);\n        }\n        /**\n         * this should be where the drawing magic happens\n         */\n\n      }\n    }\n\n    return () => {\n      console.log(\"this is where the cleanup stuff happens\");\n    };\n  }, [context, grid, currentPiece]);\n  useEffect(() => {\n    const handleKeyPress = ({\n      key\n    }) => controls(key, currentPiece, grid, context);\n\n    if (currentPiece) {\n      document.addEventListener(\"keydown\", handleKeyPress);\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [currentPiece, grid, context]);\n  const [seconds, setSeconds] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(seconds => seconds + 1);\n      if (currentPiece) if (!currentPiece.moveDown()) {\n        currentPiece.lock();\n        grid.removeFilledLines();\n        let np = newPiece(context, grid);\n        if (!np) props.setGameOver(true);\n        setCurrentPiece(np);\n        setSeconds(0);\n        console.log(\"lock current piece and request for the next piece\");\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [currentPiece, context, grid, props]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }\n  }, seconds, \" seconds since mount\"), /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"canvas\",\n    ref: canvasRef,\n    width: config.COLS * config.BLOCK,\n    height: config.ROWS * config.BLOCK,\n    style: {\n      border: \"2px solid #000\",\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default GameCanvas;","map":{"version":3,"sources":["/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx"],"names":["React","useEffect","useState","useRef","config","CanvasGrid","Piece","newPiece","controls","key","piece","grid","context","rotate","moveLeft","moveRight","moveDown","lock","penalty","GameCanvas","props","canvasRef","setContext","setGrid","currentPiece","setCurrentPiece","current","renderCtx","getContext","gr","init","console","log","draw","handleKeyPress","document","addEventListener","removeEventListener","seconds","setSeconds","interval","setInterval","removeFilledLines","np","setGameOver","clearInterval","textAlign","COLS","BLOCK","ROWS","border","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"\nimport { config } from \"../misc/canvasConfig\"\nimport CanvasGrid from \"../misc/canvasGrid\"\nimport Piece, { newPiece } from \"../misc/Piece\"\n\nfunction controls(key, piece, grid, context) {\n\tif (key === \"ArrowUp\") piece.rotate()\n\tif (key === \"ArrowLeft\") piece.moveLeft()\n\tif (key === \"ArrowRight\") piece.moveRight()\n\tif (key === \"ArrowDown\") piece.moveDown()\n\tif (key === \"l\") piece.lock()\n\tif (key === \"p\") grid.penalty(piece)\n\tif (key === \"n\") newPiece(context, grid)\n}\n\nconst GameCanvas = (props) => {\n\tconst canvasRef = useRef(null)\n\tconst [context, setContext] = useState(null)\n\tconst [grid, setGrid] = useState(null)\n\tconst [currentPiece, setCurrentPiece] = useState(null)\n\n\tuseEffect(() => {\n\t\tif (canvasRef.current) {\n\t\t\tconst renderCtx = canvasRef.current.getContext(\"2d\")\n\n\t\t\tif (renderCtx) {\n\t\t\t\tsetContext(renderCtx)\n\t\t\t}\n\t\t}\n\t}, [context])\n\n\tuseEffect(() => {\n\t\tif (context) {\n\t\t\tif (!grid) {\n\t\t\t\tlet gr = new CanvasGrid(context)\n\t\t\t\tgr.init()\n\t\t\t\tsetGrid(gr)\n\t\t\t} else {\n\t\t\t\tconsole.log(\"grid already exist\")\n\n\t\t\t\tif (!currentPiece) {\n\t\t\t\t\tlet piece = newPiece(context, grid)\n\t\t\t\t\tpiece.draw()\n\t\t\t\t\tsetCurrentPiece(piece)\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"current piece already set: \", currentPiece)\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * this should be where the drawing magic happens\n\t\t\t\t */\n\t\t\t}\n\t\t}\n\t\treturn () => {\n\t\t\tconsole.log(\"this is where the cleanup stuff happens\")\n\t\t}\n\t}, [context, grid, currentPiece])\n\n\tuseEffect(() => {\n\t\tconst handleKeyPress = ({ key }) => controls(key, currentPiece, grid, context)\n\t\tif (currentPiece) {\n\t\t\tdocument.addEventListener(\"keydown\", handleKeyPress)\n\t\t}\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"keydown\", handleKeyPress)\n\t\t}\n\t}, [currentPiece, grid, context])\n\n\tconst [seconds, setSeconds] = useState(0)\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tsetSeconds((seconds) => seconds + 1)\n\t\t\tif (currentPiece)\n\t\t\t\tif (!currentPiece.moveDown()) {\n\t\t\t\t\tcurrentPiece.lock()\n\t\t\t\t\tgrid.removeFilledLines()\n\t\t\t\t\tlet np = newPiece(context, grid)\n\t\t\t\t\tif (!np) props.setGameOver(true)\n\t\t\t\t\tsetCurrentPiece(np)\n\t\t\t\t\tsetSeconds(0)\n\t\t\t\t\tconsole.log(\"lock current piece and request for the next piece\")\n\t\t\t\t}\n\t\t}, 1000)\n\t\treturn () => clearInterval(interval)\n\t}, [currentPiece, context, grid, props])\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\ttextAlign: \"center\",\n\t\t\t}}>\n\t\t\t<h3>{seconds} seconds since mount</h3>\n\t\t\t<canvas\n\t\t\t\tid=\"canvas\"\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={config.COLS * config.BLOCK}\n\t\t\t\theight={config.ROWS * config.BLOCK}\n\t\t\t\tstyle={{\n\t\t\t\t\tborder: \"2px solid #000\",\n\t\t\t\t\tmarginTop: 10,\n\t\t\t\t}}></canvas>\n\t\t</div>\n\t)\n}\n\nexport default GameCanvas\n"]},"metadata":{},"sourceType":"module"}