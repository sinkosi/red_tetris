{"ast":null,"code":"var _jsxFileName = \"/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { pieces, pieceStartPosition } from \"../misc/pieces\";\nimport { config } from \"../misc/canvasConfig\";\nimport drawBlock from \"../misc/drawBlock\";\nimport CanvasGrid from \"../misc/canvasGrid\";\n/***\n * Tetramino Class\n */\n\nfunction Piece(context, grid, piece, colour) {\n  this.piece = piece;\n  this.colour = colour;\n  this.active = 0;\n  this.x = 0;\n  this.y = 0;\n  this.context = context;\n  this.grid = grid;\n\n  this.draw = (active = this.active) => {\n    this.active = active;\n\n    for (let row = 0; row < this.piece[this.active].length; row++) {\n      for (let col = 0; col < this.piece[this.active][row].length; col++) {\n        if (this.piece[this.active][row][col]) drawBlock(this.context, this.x + col, this.y + row, this.colour);\n      }\n    }\n  };\n\n  this.clear = (active = this.active) => {\n    this.active = active;\n\n    for (let row = 0; row < this.piece[this.active].length; row++) {\n      for (let col = 0; col < this.piece[this.active][row].length; col++) {\n        if (this.piece[this.active][row][col]) drawBlock(this.context, this.x + col, this.y + row, config.EMPTY_BG);\n      }\n    }\n  };\n\n  this.lock = () => {\n    for (let row = 0; row < this.piece[this.active].length; row++) {\n      for (let col = 0; col < this.piece[this.active][row].length; col++) {\n        if (this.piece[this.active][row][col]) grid.coords[this.y + row][this.x + col] = this.colour;\n      }\n    }\n  };\n\n  this.rotate = () => {\n    if (!this.isCollition(this.x, this.y, (this.active + 1) % 4)) {\n      this.clear();\n      this.active = (1 + this.active) % this.piece.length;\n      this.draw();\n    } else if (!this.isCollition(this.x + 1, this.y, (this.active + 1) % 4)) {\n      this.clear();\n      this.x = this.x + 1;\n      this.active = (1 + this.active) % this.piece.length;\n      this.draw();\n    } else if (!this.isCollition(this.x - 1, this.y, (this.active + 1) % 4)) {\n      this.clear();\n      this.x = this.x - 1;\n      this.active = (1 + this.active) % this.piece.length;\n      this.draw();\n    } else if (!this.isCollition(this.x - 2, this.y, (this.active + 1) % 4)) {\n      this.clear();\n      this.x = this.x - 2;\n      this.active = (1 + this.active) % this.piece.length;\n      this.draw();\n    }\n  };\n\n  this.moveLeft = () => {\n    if (!this.isCollition(this.x - 1)) {\n      this.clear();\n      this.x = this.x - 1;\n      this.draw();\n    }\n  };\n\n  this.moveRight = () => {\n    if (!this.isCollition(this.x + 1)) {\n      this.clear();\n      this.x = this.x + 1;\n      this.draw();\n    }\n  };\n\n  this.moveDown = () => {\n    if (!this.isCollition(this.x, this.y + 1)) {\n      this.clear();\n      this.y = this.y + 1;\n      this.draw();\n      return true;\n    }\n\n    return false;\n  };\n\n  this.isCollition = (newX = this.x, newY = this.y, newState = this.active) => {\n    for (let row = 0; row < this.piece[newState].length; row++) {\n      for (let col = 0; col < this.piece[newState][row].length; col++) {\n        if (this.piece[newState][row][col]) {\n          if (newX + col < 0 || newX + col >= config.COLS || newY + row >= config.ROWS) {\n            console.log(\"collision\");\n            return true;\n          }\n\n          if (this.grid.coords[newY + row][newX + col] !== config.EMPTY_BG) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n}\n\nfunction controls(key, piece, grid, context) {\n  if (key === \"ArrowUp\") piece.rotate();\n  if (key === \"ArrowLeft\") piece.moveLeft();\n  if (key === \"ArrowRight\") piece.moveRight();\n  if (key === \"ArrowDown\") piece.moveDown();\n  if (key === \"l\") piece.lock();\n  if (key === \"p\") grid.penalty(piece);\n  if (key === \"n\") newPiece(context, grid);\n}\n\nfunction newPiece(context, grid) {\n  if (!context || !grid) return null;\n  let pieceNum = Math.floor(Math.random() * pieces.length);\n  let pieceVariant = Math.floor(Math.random() * pieces[pieceNum][0].length);\n  console.log(pieceNum, pieceVariant);\n  let newPiece = new Piece(context, grid, pieces[pieceNum][0], pieces[pieceNum][1]);\n  newPiece.active = pieceVariant;\n  let [y, x] = pieceStartPosition(pieceNum, pieceVariant);\n  newPiece.x = x;\n  newPiece.y = y;\n  newPiece.draw();\n  if (newPiece.isCollition(x, y, pieceVariant)) return null;\n  return newPiece;\n}\n\nconst GameCanvas = props => {\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  const [grid, setGrid] = useState(null);\n  const [currentPiece, setCurrentPiece] = useState(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext(\"2d\");\n\n      if (renderCtx) {\n        setContext(renderCtx);\n      }\n    }\n  }, [context]);\n  useEffect(() => {\n    if (context) {\n      if (!grid) {\n        let gr = new CanvasGrid(context);\n        gr.init();\n        setGrid(gr);\n      } else {\n        console.log(\"grid already exist\");\n\n        if (!currentPiece) {\n          let piece = newPiece(context, grid);\n          piece.draw();\n          setCurrentPiece(piece);\n        } else {\n          console.log(\"current piece already set: \", currentPiece);\n        }\n        /**\n         * this should be where the drawing magic happens\n         */\n\n      }\n    }\n\n    return () => {\n      console.log(\"this is where the cleanup stuff happens\");\n    };\n  }, [context, grid, currentPiece]);\n  useEffect(() => {\n    const handleKeyPress = ({\n      key\n    }) => controls(key, currentPiece, grid, context);\n\n    if (currentPiece) {\n      document.addEventListener(\"keydown\", handleKeyPress);\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, [currentPiece, grid, context]);\n  const [seconds, setSeconds] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(seconds => seconds + 1);\n      if (currentPiece) if (!currentPiece.moveDown()) {\n        currentPiece.lock();\n        grid.removeFilledLines();\n        let np = newPiece(context, grid);\n        if (!np) props.setGameOver(true);\n        setCurrentPiece(np);\n        setSeconds(0);\n        console.log(\"lock current piece and request for the next piece\");\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [currentPiece, context, grid, props]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 4\n    }\n  }, seconds, \" seconds since mount\"), /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"canvas\",\n    ref: canvasRef,\n    width: config.COLS * config.BLOCK,\n    height: config.ROWS * config.BLOCK,\n    style: {\n      border: \"2px solid #000\",\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default GameCanvas;","map":{"version":3,"sources":["/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx"],"names":["React","useEffect","useState","useRef","pieces","pieceStartPosition","config","drawBlock","CanvasGrid","Piece","context","grid","piece","colour","active","x","y","draw","row","length","col","clear","EMPTY_BG","lock","coords","rotate","isCollition","moveLeft","moveRight","moveDown","newX","newY","newState","COLS","ROWS","console","log","controls","key","penalty","newPiece","pieceNum","Math","floor","random","pieceVariant","GameCanvas","props","canvasRef","setContext","setGrid","currentPiece","setCurrentPiece","current","renderCtx","getContext","gr","init","handleKeyPress","document","addEventListener","removeEventListener","seconds","setSeconds","interval","setInterval","removeFilledLines","np","setGameOver","clearInterval","textAlign","BLOCK","border","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\"\nimport { pieces, pieceStartPosition } from \"../misc/pieces\"\nimport { config } from \"../misc/canvasConfig\"\nimport drawBlock from \"../misc/drawBlock\"\nimport CanvasGrid from \"../misc/canvasGrid\"\n\n/***\n * Tetramino Class\n */\n\nfunction Piece(context, grid, piece, colour) {\n\tthis.piece = piece\n\tthis.colour = colour\n\tthis.active = 0\n\tthis.x = 0\n\tthis.y = 0\n\tthis.context = context\n\tthis.grid = grid\n\n\tthis.draw = (active = this.active) => {\n\t\tthis.active = active\n\n\t\tfor (let row = 0; row < this.piece[this.active].length; row++) {\n\t\t\tfor (let col = 0; col < this.piece[this.active][row].length; col++) {\n\t\t\t\tif (this.piece[this.active][row][col]) drawBlock(this.context, this.x + col, this.y + row, this.colour)\n\t\t\t}\n\t\t}\n\t}\n\tthis.clear = (active = this.active) => {\n\t\tthis.active = active\n\n\t\tfor (let row = 0; row < this.piece[this.active].length; row++) {\n\t\t\tfor (let col = 0; col < this.piece[this.active][row].length; col++) {\n\t\t\t\tif (this.piece[this.active][row][col])\n\t\t\t\t\tdrawBlock(this.context, this.x + col, this.y + row, config.EMPTY_BG)\n\t\t\t}\n\t\t}\n\t}\n\tthis.lock = () => {\n\t\tfor (let row = 0; row < this.piece[this.active].length; row++) {\n\t\t\tfor (let col = 0; col < this.piece[this.active][row].length; col++) {\n\t\t\t\tif (this.piece[this.active][row][col]) grid.coords[this.y + row][this.x + col] = this.colour\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.rotate = () => {\n\t\tif (!this.isCollition(this.x, this.y, (this.active + 1) % 4)) {\n\t\t\tthis.clear()\n\t\t\tthis.active = (1 + this.active) % this.piece.length\n\t\t\tthis.draw()\n\t\t} else if (!this.isCollition(this.x + 1, this.y, (this.active + 1) % 4)) {\n\t\t\tthis.clear()\n\t\t\tthis.x = this.x + 1\n\t\t\tthis.active = (1 + this.active) % this.piece.length\n\t\t\tthis.draw()\n\t\t} else if (!this.isCollition(this.x - 1, this.y, (this.active + 1) % 4)) {\n\t\t\tthis.clear()\n\t\t\tthis.x = this.x - 1\n\n\t\t\tthis.active = (1 + this.active) % this.piece.length\n\t\t\tthis.draw()\n\t\t} else if (!this.isCollition(this.x - 2, this.y, (this.active + 1) % 4)) {\n\t\t\tthis.clear()\n\t\t\tthis.x = this.x - 2\n\n\t\t\tthis.active = (1 + this.active) % this.piece.length\n\t\t\tthis.draw()\n\t\t}\n\t}\n\n\tthis.moveLeft = () => {\n\t\tif (!this.isCollition(this.x - 1)) {\n\t\t\tthis.clear()\n\t\t\tthis.x = this.x - 1\n\t\t\tthis.draw()\n\t\t}\n\t}\n\n\tthis.moveRight = () => {\n\t\tif (!this.isCollition(this.x + 1)) {\n\t\t\tthis.clear()\n\t\t\tthis.x = this.x + 1\n\t\t\tthis.draw()\n\t\t}\n\t}\n\n\tthis.moveDown = () => {\n\t\tif (!this.isCollition(this.x, this.y + 1)) {\n\t\t\tthis.clear()\n\t\t\tthis.y = this.y + 1\n\t\t\tthis.draw()\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\n\tthis.isCollition = (newX = this.x, newY = this.y, newState = this.active) => {\n\t\tfor (let row = 0; row < this.piece[newState].length; row++) {\n\t\t\tfor (let col = 0; col < this.piece[newState][row].length; col++) {\n\t\t\t\tif (this.piece[newState][row][col]) {\n\t\t\t\t\tif (newX + col < 0 || newX + col >= config.COLS || newY + row >= config.ROWS) {\n\t\t\t\t\t\tconsole.log(\"collision\")\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t\tif (this.grid.coords[newY + row][newX + col] !== config.EMPTY_BG) {\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false\n\t}\n}\n\nfunction controls(key, piece, grid, context) {\n\tif (key === \"ArrowUp\") piece.rotate()\n\tif (key === \"ArrowLeft\") piece.moveLeft()\n\tif (key === \"ArrowRight\") piece.moveRight()\n\tif (key === \"ArrowDown\") piece.moveDown()\n\tif (key === \"l\") piece.lock()\n\tif (key === \"p\") grid.penalty(piece)\n\tif (key === \"n\") newPiece(context, grid)\n}\n\nfunction newPiece(context, grid) {\n\tif (!context || !grid) return null\n\n\tlet pieceNum = Math.floor(Math.random() * pieces.length)\n\tlet pieceVariant = Math.floor(Math.random() * pieces[pieceNum][0].length)\n\tconsole.log(pieceNum, pieceVariant)\n\tlet newPiece = new Piece(context, grid, pieces[pieceNum][0], pieces[pieceNum][1])\n\n\tnewPiece.active = pieceVariant\n\tlet [y, x] = pieceStartPosition(pieceNum, pieceVariant)\n\tnewPiece.x = x\n\tnewPiece.y = y\n\tnewPiece.draw()\n\tif (newPiece.isCollition(x, y, pieceVariant)) return null\n\treturn newPiece\n}\n\nconst GameCanvas = (props) => {\n\tconst canvasRef = useRef(null)\n\tconst [context, setContext] = useState(null)\n\tconst [grid, setGrid] = useState(null)\n\tconst [currentPiece, setCurrentPiece] = useState(null)\n\n\tuseEffect(() => {\n\t\tif (canvasRef.current) {\n\t\t\tconst renderCtx = canvasRef.current.getContext(\"2d\")\n\n\t\t\tif (renderCtx) {\n\t\t\t\tsetContext(renderCtx)\n\t\t\t}\n\t\t}\n\t}, [context])\n\n\tuseEffect(() => {\n\t\tif (context) {\n\t\t\tif (!grid) {\n\t\t\t\tlet gr = new CanvasGrid(context)\n\t\t\t\tgr.init()\n\t\t\t\tsetGrid(gr)\n\t\t\t} else {\n\t\t\t\tconsole.log(\"grid already exist\")\n\n\t\t\t\tif (!currentPiece) {\n\t\t\t\t\tlet piece = newPiece(context, grid)\n\t\t\t\t\tpiece.draw()\n\t\t\t\t\tsetCurrentPiece(piece)\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"current piece already set: \", currentPiece)\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * this should be where the drawing magic happens\n\t\t\t\t */\n\t\t\t}\n\t\t}\n\t\treturn () => {\n\t\t\tconsole.log(\"this is where the cleanup stuff happens\")\n\t\t}\n\t}, [context, grid, currentPiece])\n\n\tuseEffect(() => {\n\t\tconst handleKeyPress = ({ key }) => controls(key, currentPiece, grid, context)\n\t\tif (currentPiece) {\n\t\t\tdocument.addEventListener(\"keydown\", handleKeyPress)\n\t\t}\n\t\treturn () => {\n\t\t\tdocument.removeEventListener(\"keydown\", handleKeyPress)\n\t\t}\n\t}, [currentPiece, grid, context])\n\n\tconst [seconds, setSeconds] = useState(0)\n\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tsetSeconds((seconds) => seconds + 1)\n\t\t\tif (currentPiece)\n\t\t\t\tif (!currentPiece.moveDown()) {\n\t\t\t\t\tcurrentPiece.lock()\n\t\t\t\t\tgrid.removeFilledLines()\n\t\t\t\t\tlet np = newPiece(context, grid)\n\t\t\t\t\tif (!np) props.setGameOver(true)\n\t\t\t\t\tsetCurrentPiece(np)\n\t\t\t\t\tsetSeconds(0)\n\t\t\t\t\tconsole.log(\"lock current piece and request for the next piece\")\n\t\t\t\t}\n\t\t}, 1000)\n\t\treturn () => clearInterval(interval)\n\t}, [currentPiece, context, grid, props])\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\ttextAlign: \"center\",\n\t\t\t}}>\n\t\t\t<h3>{seconds} seconds since mount</h3>\n\t\t\t<canvas\n\t\t\t\tid=\"canvas\"\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={config.COLS * config.BLOCK}\n\t\t\t\theight={config.ROWS * config.BLOCK}\n\t\t\t\tstyle={{\n\t\t\t\t\tborder: \"2px solid #000\",\n\t\t\t\t\tmarginTop: 10,\n\t\t\t\t}}></canvas>\n\t\t</div>\n\t)\n}\n\nexport default GameCanvas\n"]},"metadata":{},"sourceType":"module"}