{"ast":null,"code":"var _jsxFileName = \"/home/mosima/Desktop/red_tetris/frontend/src/components/Game.jsx\";\nimport { Button } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { newPiece } from \"../misc/Piece\";\nimport GameCanvas from \"./GameCanvas\";\n\nconst Game = props => {\n  const [gameOver, setGameOver] = useState(true);\n  const [grid, setGrid] = useState(null);\n  const [currentPiece, setCurrentPiece] = useState(null);\n  const [nextPiece, setNextPiece] = useState(null);\n  const [context, setContext] = useState(null);\n  useEffect(() => {\n    // setCurrentPiece(newPiece())\n    setNextPiece(newPiece());\n  }, []);\n\n  const getNextPiece = () => {\n    console.log(\"getNextPiece was called\");\n    let next = nextPiece;\n    next.context = context;\n    next.grid = grid;\n    console.log({\n      next\n    }); // let [y, x] = pieceStartPosition(pieceNum, pieceVariant)\n    // next.x = x\n    // next.y = y\n\n    next.draw();\n    setCurrentPiece(next);\n    setNextPiece(newPiece());\n    return next;\n  };\n\n  const handleStart = () => setGameOver(false);\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, gameOver ? /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: handleStart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, \"start\") : /*#__PURE__*/React.createElement(GameCanvas, {\n    setGameOver: setGameOver,\n    grid: grid,\n    setGrid: setGrid,\n    currentPiece: currentPiece,\n    setCurrentPiece: setCurrentPiece,\n    context: context,\n    setContext: setContext,\n    getNextPiece: getNextPiece,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default Game;","map":{"version":3,"sources":["/home/mosima/Desktop/red_tetris/frontend/src/components/Game.jsx"],"names":["Button","React","useEffect","useState","newPiece","GameCanvas","Game","props","gameOver","setGameOver","grid","setGrid","currentPiece","setCurrentPiece","nextPiece","setNextPiece","context","setContext","getNextPiece","console","log","next","draw","handleStart"],"mappings":";AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACvB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACf;AACAa,IAAAA,YAAY,CAACX,QAAQ,EAAT,CAAZ;AACA,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMc,YAAY,GAAG,MAAM;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,QAAIC,IAAI,GAAGP,SAAX;AACAO,IAAAA,IAAI,CAACL,OAAL,GAAeA,OAAf;AACAK,IAAAA,IAAI,CAACX,IAAL,GAAYA,IAAZ;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,MAAAA;AAAF,KAAZ,EAL0B,CAO1B;AACA;AACA;;AACAA,IAAAA,IAAI,CAACC,IAAL;AACAT,IAAAA,eAAe,CAACQ,IAAD,CAAf;AACAN,IAAAA,YAAY,CAACX,QAAQ,EAAT,CAAZ;AACA,WAAOiB,IAAP;AACA,GAdD;;AAgBA,QAAME,WAAW,GAAG,MAAMd,WAAW,CAAC,KAAD,CAArC;;AAEA,sBACC,0CACED,QAAQ,gBACR,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,SAAd;AAAwB,IAAA,OAAO,EAAEe,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADQ,gBAKR,oBAAC,UAAD;AACC,IAAA,WAAW,EAAEd,WADd;AAEC,IAAA,IAAI,EAAEC,IAFP;AAGC,IAAA,OAAO,EAAEC,OAHV;AAIC,IAAA,YAAY,EAAEC,YAJf;AAKC,IAAA,eAAe,EAAEC,eALlB;AAMC,IAAA,OAAO,EAAEG,OANV;AAOC,IAAA,UAAU,EAAEC,UAPb;AAQC,IAAA,YAAY,EAAEC,YARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADD;AAoBA,CAlDD;;AAoDA,eAAeZ,IAAf","sourcesContent":["import { Button } from \"@material-ui/core\"\nimport React, { useEffect, useState } from \"react\"\nimport { newPiece } from \"../misc/Piece\"\nimport GameCanvas from \"./GameCanvas\"\n\nconst Game = (props) => {\n\tconst [gameOver, setGameOver] = useState(true)\n\tconst [grid, setGrid] = useState(null)\n\tconst [currentPiece, setCurrentPiece] = useState(null)\n\tconst [nextPiece, setNextPiece] = useState(null)\n\tconst [context, setContext] = useState(null)\n\n\tuseEffect(() => {\n\t\t// setCurrentPiece(newPiece())\n\t\tsetNextPiece(newPiece())\n\t}, [])\n\n\tconst getNextPiece = () => {\n\t\tconsole.log(\"getNextPiece was called\")\n\t\tlet next = nextPiece\n\t\tnext.context = context\n\t\tnext.grid = grid\n\t\tconsole.log({ next })\n\n\t\t// let [y, x] = pieceStartPosition(pieceNum, pieceVariant)\n\t\t// next.x = x\n\t\t// next.y = y\n\t\tnext.draw()\n\t\tsetCurrentPiece(next)\n\t\tsetNextPiece(newPiece())\n\t\treturn next\n\t}\n\n\tconst handleStart = () => setGameOver(false)\n\n\treturn (\n\t\t<>\n\t\t\t{gameOver ? (\n\t\t\t\t<Button color=\"primary\" onClick={handleStart}>\n\t\t\t\t\tstart\n\t\t\t\t</Button>\n\t\t\t) : (\n\t\t\t\t<GameCanvas\n\t\t\t\t\tsetGameOver={setGameOver}\n\t\t\t\t\tgrid={grid}\n\t\t\t\t\tsetGrid={setGrid}\n\t\t\t\t\tcurrentPiece={currentPiece}\n\t\t\t\t\tsetCurrentPiece={setCurrentPiece}\n\t\t\t\t\tcontext={context}\n\t\t\t\t\tsetContext={setContext}\n\t\t\t\t\tgetNextPiece={getNextPiece}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t)\n}\n\nexport default Game\n"]},"metadata":{},"sourceType":"module"}