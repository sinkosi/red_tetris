{"ast":null,"code":"var _jsxFileName = \"/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx\";\nimport React, { useEffect, useState, useRef } from \"react\";\n/**********************************\\\n * canvas config data\n\\**********************************/\n\nconst ROWS = 20;\nconst COLS = 10;\nconst EMPTY_BG = \"#765\";\nconst BORDER = \"adf\";\nconst BLOCK = 20;\n/****\n * Canvas drawing functions\n */\n\nconst drawBlock = (context, x, y, colour = EMPTY_BG, strokeColour = BORDER) => {\n  context.fillStyle = colour;\n  context.fillRect(x * BLOCK, y * BLOCK, BLOCK, BLOCK);\n  context.strokeStyle = strokeColour;\n  context.strokeRect(x * BLOCK, y * BLOCK, BLOCK, BLOCK);\n};\n/***\n * Tetramino Class\n */\n\n\nfunction Piece(context, grid, piece, colour) {\n  this.piece = piece;\n  this.colour = colour;\n  this.active = 0;\n  this.x = 0;\n  this.y = 0;\n  this.context = context;\n\n  this.draw = (active = this.active) => {\n    this.active = active;\n\n    for (let row = 0; row < this.piece[this.active].length; row++) {\n      for (let col = 0; col < this.piece[this.active][row].length; col++) {\n        if (this.piece[this.active][row][col]) drawBlock(this.context, this.x + col, this.y + row, this.colour);\n      }\n    }\n  };\n\n  this.clear = (active = this.active) => {\n    this.active = active;\n\n    for (let row = 0; row < this.piece[this.active].length; row++) {\n      for (let col = 0; col < this.piece[this.active][row].length; col++) {\n        if (this.piece[this.active][row][col]) drawBlock(this.context, this.x + col, this.y + row, EMPTY_BG);\n      }\n    }\n  };\n\n  this.lock = () => {\n    for (let row = 0; row < this.piece[this.active].length; row++) {\n      for (let col = 0; col < this.piece[this.active][row].length; col++) {\n        if (this.piece[this.active][row][col]) grid.coords[this.y + row][this.x + col] = this.colour;\n      }\n    }\n  };\n}\n/**\n * Grid class\n */\n\n\nfunction Grid(context, colums = COLS, rows = ROWS, backgroundColour = EMPTY_BG) {\n  this.colums = colums;\n  this.rows = rows;\n  this.colour = backgroundColour;\n  this.coords = [];\n\n  this.init = () => {\n    for (let row = 0; row < this.rows; row++) {\n      this.coords[row] = [];\n\n      for (let col = 0; col < this.colums; col++) {\n        this.coords[row][col] = EMPTY_BG;\n      }\n    }\n\n    this.draw();\n  };\n\n  this.draw = () => {\n    let r = 0;\n    let c = 0;\n\n    while (this.coords[r]) {\n      c = 0;\n\n      while (this.coords[c]) {\n        drawBlock(context, c, r, this.coords[r][c]);\n        c++;\n      }\n\n      r++;\n    }\n  };\n}\n\nconst GameCanvas = () => {\n  const canvasRef = useRef(null);\n  const [context, setContext] = useState(null);\n  const [grid, setGrid] = useState(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext(\"2d\");\n\n      if (renderCtx) {\n        setContext(renderCtx);\n      }\n    }\n  }, [context]);\n  useEffect(() => {\n    if (context) {\n      if (!grid) {\n        let gr = new Grid(context, 10, 20);\n        gr.init();\n        setGrid(gr);\n      } else {\n        console.log(\"grid already exist\");\n      }\n      /**\n       * this should be where the drawing magic happens\n       */\n\n    }\n\n    return () => {\n      console.log(\"this is where the cleanup stuff happens\");\n    };\n  }, [context, grid]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => setMsg(\"new message\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 4\n    }\n  }, \"hi\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 63\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"canvas\",\n    ref: canvasRef,\n    width: 500,\n    height: 500,\n    style: {\n      border: \"2px solid #000\",\n      marginTop: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default GameCanvas;","map":{"version":3,"sources":["/home/mosima/Desktop/red_tetris/frontend/src/components/GameCanvas.jsx"],"names":["React","useEffect","useState","useRef","ROWS","COLS","EMPTY_BG","BORDER","BLOCK","drawBlock","context","x","y","colour","strokeColour","fillStyle","fillRect","strokeStyle","strokeRect","Piece","grid","piece","active","draw","row","length","col","clear","lock","coords","Grid","colums","rows","backgroundColour","init","r","c","GameCanvas","canvasRef","setContext","setGrid","current","renderCtx","getContext","gr","console","log","textAlign","e","setMsg","border","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\n/**********************************\\\n * canvas config data\n\\**********************************/\nconst ROWS = 20;\nconst COLS = 10;\nconst EMPTY_BG = \"#765\";\nconst BORDER = \"adf\";\nconst BLOCK = 20;\n\n/****\n * Canvas drawing functions\n */\nconst drawBlock = (context, x, y, colour = EMPTY_BG, strokeColour = BORDER) => {\n\tcontext.fillStyle = colour;\n\tcontext.fillRect(x * BLOCK, y * BLOCK, BLOCK, BLOCK);\n\tcontext.strokeStyle = strokeColour;\n\tcontext.strokeRect(x * BLOCK, y * BLOCK, BLOCK, BLOCK);\n};\n\n/***\n * Tetramino Class\n */\n\nfunction Piece(context, grid, piece, colour) {\n\tthis.piece = piece;\n\tthis.colour = colour;\n\tthis.active = 0;\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.context = context;\n\n\tthis.draw = (active = this.active) => {\n\t\tthis.active = active;\n\n\t\tfor (let row = 0; row < this.piece[this.active].length; row++) {\n\t\t\tfor (\n\t\t\t\tlet col = 0;\n\t\t\t\tcol < this.piece[this.active][row].length;\n\t\t\t\tcol++\n\t\t\t) {\n\t\t\t\tif (this.piece[this.active][row][col])\n\t\t\t\t\tdrawBlock(\n\t\t\t\t\t\tthis.context,\n\t\t\t\t\t\tthis.x + col,\n\t\t\t\t\t\tthis.y + row,\n\t\t\t\t\t\tthis.colour\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\tthis.clear = (active = this.active) => {\n\t\tthis.active = active;\n\n\t\tfor (let row = 0; row < this.piece[this.active].length; row++) {\n\t\t\tfor (\n\t\t\t\tlet col = 0;\n\t\t\t\tcol < this.piece[this.active][row].length;\n\t\t\t\tcol++\n\t\t\t) {\n\t\t\t\tif (this.piece[this.active][row][col])\n\t\t\t\t\tdrawBlock(\n\t\t\t\t\t\tthis.context,\n\t\t\t\t\t\tthis.x + col,\n\t\t\t\t\t\tthis.y + row,\n\t\t\t\t\t\tEMPTY_BG\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\tthis.lock = () => {\n\t\tfor (let row = 0; row < this.piece[this.active].length; row++) {\n\t\t\tfor (\n\t\t\t\tlet col = 0;\n\t\t\t\tcol < this.piece[this.active][row].length;\n\t\t\t\tcol++\n\t\t\t) {\n\t\t\t\tif (this.piece[this.active][row][col])\n\t\t\t\t\tgrid.coords[this.y + row][this.x + col] = this.colour;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Grid class\n */\n\nfunction Grid(\n\tcontext,\n\tcolums = COLS,\n\trows = ROWS,\n\tbackgroundColour = EMPTY_BG\n) {\n\tthis.colums = colums;\n\tthis.rows = rows;\n\tthis.colour = backgroundColour;\n\tthis.coords = [];\n\n\tthis.init = () => {\n\t\tfor (let row = 0; row < this.rows; row++) {\n\t\t\tthis.coords[row] = [];\n\t\t\tfor (let col = 0; col < this.colums; col++) {\n\t\t\t\tthis.coords[row][col] = EMPTY_BG;\n\t\t\t}\n\t\t}\n\t\tthis.draw();\n\t};\n\tthis.draw = () => {\n\t\tlet r = 0;\n\t\tlet c = 0;\n\t\twhile (this.coords[r]) {\n\t\t\tc = 0;\n\t\t\twhile (this.coords[c]) {\n\t\t\t\tdrawBlock(context, c, r, this.coords[r][c]);\n\t\t\t\tc++;\n\t\t\t}\n\t\t\tr++;\n\t\t}\n\t};\n}\n\nconst GameCanvas = () => {\n\tconst canvasRef = useRef(null);\n\tconst [context, setContext] = useState(null);\n\tconst [grid, setGrid] = useState(null);\n\n\tuseEffect(() => {\n\t\tif (canvasRef.current) {\n\t\t\tconst renderCtx = canvasRef.current.getContext(\"2d\");\n\n\t\t\tif (renderCtx) {\n\t\t\t\tsetContext(renderCtx);\n\t\t\t}\n\t\t}\n\t}, [context]);\n\n\tuseEffect(() => {\n\t\tif (context) {\n\t\t\tif (!grid) {\n\t\t\t\tlet gr = new Grid(context, 10, 20);\n\t\t\t\tgr.init();\n\t\t\t\tsetGrid(gr);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"grid already exist\");\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * this should be where the drawing magic happens\n\t\t\t */\n\t\t}\n\t\treturn () => {\n\t\t\tconsole.log(\"this is where the cleanup stuff happens\");\n\t\t};\n\t}, [context, grid]);\n\n\treturn (\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\ttextAlign: \"center\",\n\t\t\t}}\n\t\t>\n\t\t\t<button onClick={(e) => setMsg(\"new message\")}>hi</button> <br />\n\t\t\t<canvas\n\t\t\t\tid=\"canvas\"\n\t\t\t\tref={canvasRef}\n\t\t\t\twidth={500}\n\t\t\t\theight={500}\n\t\t\t\tstyle={{\n\t\t\t\t\tborder: \"2px solid #000\",\n\t\t\t\t\tmarginTop: 10,\n\t\t\t\t}}\n\t\t\t></canvas>\n\t\t</div>\n\t);\n};\n\nexport default GameCanvas;\n"]},"metadata":{},"sourceType":"module"}